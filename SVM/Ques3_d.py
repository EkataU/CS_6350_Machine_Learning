{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4a28e1f3-a68b-4da9-8684-f04ee80e4688",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gamma of 0.1\n",
      "Training Accuracy of: 0.9977064220183486\n",
      "Testign Accuracy of: 0.998\n",
      "======================================\n",
      "Gamma of 0.5\n",
      "Training Accuracy of: 1.0\n",
      "Testign Accuracy of: 0.996\n",
      "======================================\n",
      "Gamma of 1\n",
      "Training Accuracy of: 1.0\n",
      "Testign Accuracy of: 0.996\n",
      "======================================\n",
      "Gamma of 5\n",
      "Training Accuracy of: 1.0\n",
      "Testign Accuracy of: 0.996\n",
      "======================================\n",
      "Gamma of 100\n",
      "Training Accuracy of: 0.966743119266055\n",
      "Testign Accuracy of: 0.954\n",
      "======================================\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy import linalg\n",
    "\n",
    "def main():\n",
    "\n",
    "    train = pd.read_csv(\"./bank-note/train.csv\", header=None)\n",
    "    test = pd.read_csv(\"./bank-note/test.csv\", header=None)\n",
    "\n",
    "    train_x = train.iloc[: , :-1]\n",
    "    train_y = train.iloc[: , -1]\n",
    "    train_y = np.where(train_y > 0, 1, -1)\n",
    "\n",
    "    test_x = test.iloc[: , :-1]\n",
    "    temp_y = test.iloc[: , -1]\n",
    "    test_y = np.where(temp_y > 0, 1, -1)\n",
    "    \n",
    "\n",
    "    train_x = np.array(train_x)\n",
    "    train_y = np.array(train_y)\n",
    "    test_x = np.array(test_x)\n",
    "    test_y = np.array(test_y)\n",
    "    \n",
    "    gamma = [0.1, 0.5, 1, 5, 100]\n",
    "    for g in gamma:\n",
    "        kp = KernelPerceptron(kernel=\"gaussian\", gamma=g)\n",
    "        kp.fit(train_x, train_y)\n",
    "        preds = kp.predict(train_x)\n",
    "        preds2 = kp.predict(test_x)\n",
    "        correct = np.sum(preds == train_y)\n",
    "        correct2 = np.sum(preds2 == test_y)\n",
    "        print(\"learning rate,gamma \" + str(g))\n",
    "        print(\"Training Accuracy \" + str(correct / len(preds)))\n",
    "        print(\"Testign Accuracy \" + str(correct2 / len(preds2)))\n",
    "         print(\"_________\")\n",
    "\n",
    "\n",
    "class KernelPerceptron():\n",
    "    def __init__(self, kernel, gamma, T=1):\n",
    "        self.kernel = kernel\n",
    "        self.T = T\n",
    "        self.gamma = gamma\n",
    "        self.alpha = 5\n",
    "\n",
    "    def fit(self, X, y):\n",
    "        threshold = 1e-10\n",
    "        self.alpha = np.zeros(X.shape[0], dtype=np.float64)\n",
    "\n",
    "        K = np.zeros((X.shape[0], X.shape[0]))\n",
    "        for i in range(X.shape[0]):\n",
    "            for j in range(X.shape[0]):\n",
    "                if self.kernel == \"gaussian\":\n",
    "                    K[i,j] = self.gaussian(X[i], X[j], self.gamma)\n",
    "                elif self.kernel == \"linear\":\n",
    "                    K[i,j] = self.linear(X[i], X[j])\n",
    "\n",
    "        for t in range(self.T):\n",
    "            for i in range(X.shape[0]):\n",
    "                if np.sign(np.sum(K[:,i] * self.alpha * y)) != y[i]:\n",
    "                    self.alpha[i] += 1.0\n",
    "\n",
    "        support_vectors = self.alpha > threshold\n",
    "        ind = np.arange(len(self.alpha))[support_vectors]\n",
    "        self.alpha = self.alpha[support_vectors]\n",
    "        self.support_vectors = X[support_vectors]\n",
    "        self.sv_y = y[support_vectors]\n",
    "\n",
    "    def dual_objective(self, X):\n",
    "        y_predict = np.zeros(len(X))\n",
    "        for i in range(len(X)):\n",
    "            s = 0\n",
    "            for alph, sv_y, support_vectors in zip(self.alpha, self.sv_y, self.support_vectors):\n",
    "                s += alph * sv_y * self.gaussian(X[i], support_vectors, self.gamma)\n",
    "            y_predict[i] = s\n",
    "        return y_predict\n",
    "\n",
    "    def predict(self, X):\n",
    "        X = np.atleast_2d(X)\n",
    "        return np.sign(self.dual_objective(X))\n",
    "\n",
    "    def linear(self, xi, xj):\n",
    "        return np.dot(xi, xj)\n",
    "\n",
    "    def gaussian(self, X, z, gamma):\n",
    "        return np.exp(-(np.linalg.norm(X-z, ord=2)**2) / gamma)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
